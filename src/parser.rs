use crate::defs::*;
use std::{
    cell::RefCell,
    collections::HashMap,
    io::{Error, ErrorKind, Result},
    rc::Rc,
};
use xlsx_read::{excel_file::ExcelFile, excel_table::ExcelTable};

use item_class::ItemClass;
mod item_class;

use base_class::BaseClass;
mod base_class;

use cell_value::CellValue;
mod cell_value;

mod stack;

trait CodeGenerator {
    type Output;
    fn gen_code(&self, end: &'static str, tab_nums: i32) -> Self::Output;
}

enum KeyType {
    None,
    DefKey(Vec<ItemStr>),
    OriginalTemplateId,
}

pub struct DefaultData(HashMap<Rc<String>, Box<CellValue>>);
impl Default for DefaultData {
    fn default() -> Self {
        DefaultData(HashMap::with_capacity(20))
    }
}

pub struct VarData(HashMap<Rc<String>, Vec<Box<CellValue>>>);
impl Default for VarData {
    fn default() -> Self {
        VarData(HashMap::with_capacity(20))
    }
}

pub struct Parser {
    item_class: ItemClass,
    base_class: BaseClass,
    defaults: Rc<RefCell<DefaultData>>,
    vals: Rc<RefCell<VarData>>,
    required_fields: Rc<RefCell<Vec<ItemStr>>>,
    key_type: KeyType,
    skip_cols: Vec<usize>
}

impl CodeGenerator for Parser {
    type Output = String;

    fn gen_code(&self, end: &'static str, tab_nums: i32) -> Self::Output {
        let mut code = String::with_capacity(1024);

        // comment
        code.push_str("////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////");
        code.push_str(end);
        code.push_str("// This File is generated by the program, DO NOT EDIT MANUALLY!");
        code.push_str(end);
        code.push_str("// 此文件由程序生成, 切勿手动编辑!");
        code.push_str(end);
        code.push_str("////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////");
        code.push_str(end);

        // using
        code.push_str("using System;");
        code.push_str(end);
        code.push_str("using System.Linq;");
        code.push_str(end);
        code.push_str("using System.Collections;");
        code.push_str(end);
        code.push_str("using System.Collections.Generic;");
        code.push_str(end);
        code.push_str("using Config.Common;");
        code.push_str(end);
        code.push_str(end);

        // #pragma
        code.push_str("#pragma warning disable 1591");
        code.push_str(end);
        code.push_str(end);

        // namespace-start
        code.push_str("namespace Config");
        code.push_str(end);
        code.push('{');
        code.push_str(end);

        // ItemClass
        code.push_str(self.item_class.gen_code(end, tab_nums + 1).as_str());
        code.push_str(end);
        // empty line
        code.push_str(end);
        // BaseClass
        code.push_str(self.base_class.gen_code(end, tab_nums + 1).as_str());
        code.push_str(end);

        // namespace-end
        code.push('}');

        code
    }
}

impl Parser {
    pub fn new() -> Self {
        Parser {
            item_class: ItemClass::default(),
            base_class: BaseClass::default(),
            defaults: Rc::from(RefCell::from(DefaultData::default())),
            vals: Rc::from(RefCell::from(VarData::default())),
            key_type: KeyType::None,
            skip_cols: Vec::default(),
            required_fields: Rc::from(RefCell::from(Vec::default()))
        }
    }

    pub fn read_file(&mut self, file_name: &str) -> Result<()> {
        let file = ExcelFile::load_from_path(file_name);
        self.item_class.name = String::from(file_name);
        self.item_class.name.remove_matches(".xlsx");
        self.base_class.name = String::from(file_name);
        self.base_class.name.remove_matches(".xlsx");

        if let Ok(mut ff) = file {
            if let Ok(ret) = ff.parse_workbook() {
                for (name, id) in ret.into_iter() {
                    println!("{}, {}", name, id);

                    let content = ff.parse_sheet(*id);
                    if let Ok(table) = content {
                        if name == "Template" {
                            self.parse_template(table);
                        }
                    }
                }
            }
        } else if let Err(e) = file {
            return Err(Error::new(ErrorKind::Other, e));
        } else {
            return Err(Error::new(ErrorKind::Other, "load from xlsx file failed"));
        }

        Ok(())
    }

    pub fn generate(&self, end: &'static str) -> String {
        self.gen_code(end, 0)
    }

    //------------------------private---------------------------------

    fn parse_template(&mut self, table: ExcelTable) {
        let width = table.width();
        let height = table.height();

        // check flag for (1, 3)
        if let Some(v) = table.cell(DATA_TEMPLATE_ID_POS.0, DATA_TEMPLATE_ID_POS.1) {
            if v.starts_with("#") {
                if v.contains("DefKey") {
                    self.key_type = KeyType::DefKey(vec![]);
                } else {
                    self.key_type = KeyType::OriginalTemplateId;
                }
            }
        }

        // collect skip_cols and required fields
        for col in 0..width {
            if let Some(v) = table.cell(col, DATA_IDENTIFY_ROW) {
                if v.starts_with("#") {
                    self.skip_cols.push(col);
                } else {
                    self.required_fields.borrow_mut().push(Some(v.clone()));
                }
            }
        }

        for col in (0..width).filter(|x| !self.skip_cols.contains(x)) {
            let ident = table.cell(col, DATA_IDENTIFY_ROW).unwrap();
            let ty = convert_type(table.cell(col, DATA_TYPE_ROW).unwrap().clone());

            // collect (comment, identify, type) in row (1, 3, 4)
            if let Some(c1) = table.cell(col, DATA_COMMENT_ROW) {
                self.item_class.items.push((
                    Some(c1.clone()),
                    Some(ident.clone()),
                    Some(ty.clone()),
                ));
            }

            // collect defaults
            if let Some(default) = table.cell(col, DATA_DEFAULT_ROW) {
                use std::collections::hash_map::Entry;
                match self.defaults.borrow_mut().0.entry(ident.clone()) {
                    Entry::Occupied(_) => {}
                    Entry::Vacant(e) => {
                        e.insert(Box::new(CellValue::new(default, &ty)));
                    }
                }
            }

            // collect vars
            if !self.vals.borrow_mut().0.contains_key(ident) {
                self.vals.borrow_mut().0.insert(ident.clone(), Vec::default());
                
                for row in DATA_START_ROW..height-1 {
                    use std::collections::hash_map::Entry;
                    if let Some(v) = table.cell(col, row) {
                        match self.vals.borrow_mut().0.entry(ident.clone()) {
                            Entry::Occupied(mut e) => {
                                e.get_mut().push(Box::new(CellValue::new(v, &ty)));
                            }
                            Entry::Vacant(_) => {}
                        }
                    } else {
                        // empty cell
                        match self.vals.borrow_mut().0.entry(ident.clone()) {
                            Entry::Occupied(mut e) => {
                                e.get_mut().push(Box::new(CellValue::new(&Rc::new(String::default()), &ty)));
                            }
                            Entry::Vacant(_) => {}
                        }
                    }
                }
            }
        }

        // item_class
        self.item_class.defaults = Some(Rc::downgrade(&self.defaults));
        self.item_class.vals = Some(Rc::downgrade(&self.vals));
        // base_class
        self.base_class.lines = height - DATA_START_ROW - 1;
        self.base_class.defaults = Some(Rc::downgrade(&self.defaults));
        self.base_class.vals = Some(Rc::downgrade(&self.vals));
        self.base_class.required_fields = Some(Rc::downgrade(&self.required_fields));

        // collect DefKey in col 1, data start frow row 8
        if let KeyType::DefKey(ref mut vec) = self.key_type {
            for row in DATA_START_ROW..height-1 {
                if let Some(v) = table.cell(DATA_TEMPLATE_ID_POS.0, row) {
                    vec.push(Some(v.clone()));
                }
            }
        }
    }
}

fn convert_type(mut v: Rc<String>) -> Rc<String> {
    if let Some(s) = Rc::get_mut(&mut v) {
        // convert array
        if let Some(idx) = s.find('[') {
            let mut n = idx;
            while let Some(c) = s.chars().nth(n) {
                if c == ']' {
                    break;
                } else {
                    n = n + 1;
                }
            }
            s.replace_range(idx + 1..n, "");
        }
    }
    v
}
